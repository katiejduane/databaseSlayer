<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>restaurant_db</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>3234707397946291084</string>
			<key>name</key>
			<string>webdev</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>latin1</string>
			<key>contentFilter</key>
			<dict/>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGOTpYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK0HCBUWFxgZHSQoLDE2VSRudWxs0wkK
			CwwQFFdOUy5rZXlzWk5TLm9iamVjdHNWJGNsYXNzow0OD4ACgAOA
			BKMREhOABYAGgAiADFR0eXBlVHJvd3NUa2V5c18QJlNlbGVjdGlv
			bkRldGFpbFR5cGVQcmltYXJ5S2V5ZWREZXRhaWxz0wkKCxobHKCg
			gAfSHh8gIVokY2xhc3NuYW1lWCRjbGFzc2VzXxATTlNNdXRhYmxl
			RGljdGlvbmFyeaMgIiNcTlNEaWN0aW9uYXJ5WE5TT2JqZWN00goL
			JSehJoAJgAvSCykqK1lOUy5zdHJpbmeAClJpZNIeHy0uXxAPTlNN
			dXRhYmxlU3RyaW5noy0vMFhOU1N0cmluZ1hOU09iamVjdNIeHzIz
			Xk5TTXV0YWJsZUFycmF5ozI0NVdOU0FycmF5WE5TT2JqZWN00h4f
			IjeiIjhYTlNPYmplY3RfEA9OU0tleWVkQXJjaGl2ZXLROzxUZGF0
			YYABAAgAEQAaACMALQAyADcARQBLAFIAWgBlAGwAcAByAHQAdgB6
			AHwAfgCAAIIAhwCMAJEAugDBAMIAwwDFAMoA1QDeAPQA+AEFAQ4B
			EwEVARcBGQEeASgBKgEtATIBRAFIAVEBWgFfAW4BcgF6AYMBiAGL
			AZQBpgGpAa4AAAAAAAACAQAAAAAAAAA9AAAAAAAAAAAAAAAAAAAB
			sA==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {961, 600}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>-- When you have an aggreage function (sum, average)
-- and you want to group things togetehr, we use
-- GROUP BY, provide the field that should make the gorup */

-- 1. get the average stars by restaurant (restaurant name, average star rating)
select * from restaurants as r
	inner join reviews on r.id = reviews.restaurant_id;

SELECT r.name, AVG(reviews.stars) FROM restaurants as r
   INNER JOIN reviews ON r.id = reviews.restaurant_id
   GROUP BY r.id;

-- To discrimiate by group, use HAVING, not WHERE
SELECT r.name, AVG(reviews.stars) AS avgReview FROM restaurants as r
   INNER JOIN reviews ON r.id = reviews.restaurant_id
   GROUP BY r.id HAVING avgReview &gt; 3;

SELECT r.name, AVG(reviews.stars) AS avgReview FROM restaurants as r
   INNER JOIN reviews ON r.id = reviews.restaurant_id
   WHERE reviews.stars &gt; 4
   GROUP BY r.id;	

-- 3. get the lowest star rating for each user (user name, lowest star rating)
-- for lowerst uses MIN() for highest use MAX()
SELECT users.name, MIN(reviews.stars) as lowestStar FROM reviews
	inner join users on reviews.author_id = users.id
	GROUP BY users.id;
	
SELECT users.name, MIN(reviews.stars) as lowestStar, MIN(r.name) as restaurantName FROM reviews
    INNER JOIN users ON reviews.author_id = users.id
    INNER JOIN restaurants AS r ON r.id = reviews.restaurant_id
    GROUP BY users.id;
	
-- 4. get the number of reviews by restaurant (restaurant name, review count)
SELECT COUNT(r.id) as numReviews from reviews
	INNER JOIN restaurants as r on reviews.restaurant_id = r.id
	GROUP BY r.id;

-- 5. get the number of restaurants in each category (category name, restaurant count)
-- 6. get number of 5 star reviews by restaurant (restaurant name, 5-star count)
-- 7. average star rating for a food category (category name, average star rating)


UPDATE reviews SET restaurant_id = 7
	where restaurant_id = 16;
	
	


	</string>
			<key>table</key>
			<string>reviews</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>-- 4. get the number of reviews by restaurant (restaurant name, review count)
SELECT COUNT(r.id) as numReviews from reviews
	INNER JOIN restaurants as r on reviews.restaurant_id = r.id
	GROUP BY r.id</string>
		<string>SELECT users.name, r.name, MIN(reviews.stars) as lowestStar FROM reviews
	inner join users on reviews.author_id = users.id
	inner join restaurants as r on r.id = reviews.restaurant_id
	GROUP BY users.id</string>
		<string>-- 4. get the number of reviews by restaurant (restaurant name, review count)
SELECT COUNT(ri.d) as numReviews from reviews
	INNER JOIN restaurants as r on reviews.restaurant_id = r.id
	GROUP BY r.id</string>
		<string>-- 4. get the number of reviews by restaurant (restaurant name, review count)
SELECT * from reviews
INNER JOIN restaurants as r on reviews.restaurant_id = r.id</string>
		<string>SELECT users.name, r.name, MIN(reviews.stars) as lowestStar FROM reviews
	inner join users on reviews.author_id = users.id
	inner join restaurants asr on r.id = reviews.restaurant_id
	GROUP BY users.id</string>
		<string>-- 3. get the lowest star rating for each user (user name, lowest star rating)
-- for lowerst uses MIN() for highest use MAX()
SELECT users.name, MIN(reviews.stars) as lowestStar FROM reviews
	inner join users on reviews.author_id = users.id
	GROUP BY users.id</string>
		<string>-- 3. get the lowest star rating for each user (user name, lowest star rating)
-- for lowerst uses MIN() for highest use MAX()
SELECT users.name MIN(reivews.stars) as lowest FROM reviews
	inner join users on reviews.author_id = users.id
	GROUP BY users.id</string>
		<string>-- 3. get the lowest star rating for each user (user name, lowest star rating)
SELECT * FROM reviews
	inner join users on reviews.author_id = users.id</string>
		<string>SELECT r.name, AVG(reviews.stars) as avgReview FROM restaurants as r 
	INNER JOIN reviews ON r.id = reviews.restaurant_id
	GROUP BY r.id HAVING avgReview &lt; 3</string>
		<string>-- 3. get the lowest star rating for each user (user name, lowest star rating)
-- 4. get the number of reviews by restaurant (restaurant name, review count)
-- 5. get the number of restaurants in each category (category name, restaurant count)
-- 6. get number of 5 star reviews by restaurant (restaurant name, 5-star count)
-- 7. average star rating for a food category (category name, average star rating)


UPDATE reviews SET restaurant_id = 7
	where restaurant_id = 16</string>
		<string>-- 3. get the lowest star rating for each user (user name, lowest star rating)
-- 4. get the number of reviews by restaurant (restaurant name, review count)
-- 5. get the number of restaurants in each category (category name, restaurant count)
-- 6. get number of 5 star reviews by restaurant (restaurant name, 5-star count)
-- 7. average star rating for a food category (category name, average star rating)


UPDATE reviews SET restaurant_id = 7
	where id = 16</string>
		<string>-- 3. get the lowest star rating for each user (user name, lowest star rating)
-- 4. get the number of reviews by restaurant (restaurant name, review count)
-- 5. get the number of restaurants in each category (category name, restaurant count)
-- 6. get number of 5 star reviews by restaurant (restaurant name, 5-star count)
-- 7. average star rating for a food category (category name, average star rating)


UPDATE reviews SET restaurant_id = 8
	where id = 9</string>
		<string>-- 3. get the lowest star rating for each user (user name, lowest star rating)
-- 4. get the number of reviews by restaurant (restaurant name, review count)
-- 5. get the number of restaurants in each category (category name, restaurant count)
-- 6. get number of 5 star reviews by restaurant (restaurant name, 5-star count)
-- 7. average star rating for a food category (category name, average star rating)


INSERT INTO reviews (author_id, stars, title, review, restaurant_id)
	VALUES
	(1, 1, 'Ugh', "What a terrible experience!", 1),
	(3, 3, 'So-so', "I could probably be happier just cooking at home for the cost", 1),
	(2, 5, 'DELISH', "My favorite food in the whole world X 1000000000", 1)</string>
		<string>-- When you have an aggregate function (sum, avergae), and you want to group things together, we use
-- GROUP BY, provide the field that shoudl make the group
-- 2. get the average stars by user (user name, average star rating)
SELECT r.name, AVG(reviews.stars) FROM restaurants as r 
	INNER JOIN reviews ON r.id = reviews.restaurant_id
	GROUP BY r.id</string>
		<string>-- When you have an aggregate function (sum, avergae), and you want to group things together, we use
-- GROUP BY, provide the field that shoudl make the group
-- 2. get the average stars by user (user name, average star rating)
SELECT AVG(reviews.stars) FROM restaurants as r 
	INNER JOIN reviews ON r.id = reviews.restaurant_id
	GROUP BY r.id</string>
		<string>-- 1. get the average stars by restaurant (restaurant name, average star rating)
select * from restaurants as r
	inner join reviews on r.id = reviews.restaurant_id</string>
		<string>-- 1. get the average stars by restaurant (restaurant name, average star rating)
select * from restaurants</string>
		<string>UPDATE users SET email = 'tabbykat333@aol.com'
where id = 1</string>
		<string>UPDATE users SET name = 'Tabitha Winkler'
where name = 'Hillary Jenkins'</string>
		<string>INSERT INTO reviews (author_id, stars, title, review, restaurant_id)
	VALUES
	(1, 4, 'Deliciosoooo', "Super romantic spot for me and my booooo!", 16)</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.25</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
